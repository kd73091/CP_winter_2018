package com.project;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;

import javax.swing.JPanel;

public class BoardPanel extends JPanel {

	private static final long serialVersionUID = 1L ;

	public static final int COL_COUNT = 25;

	public static final int ROW_COUNT = 25;


	public static final int TILE_SIZE = 25;


	//private static final int EYE_LARGE_INSET = TILE_SIZE / 3;

	//private static final int EYE_SMALL_INSET = TILE_SIZE / 6;

	//private static final int EYE_LENGTH = TILE_SIZE / 5;


	private static final Font FONT = new Font("Georgia",Font.BOLD, 25);


	private SnakeGame game;

	private TileType[] tiles;

	public BoardPanel(SnakeGame game) {
		this.game = game;
		this.tiles = new TileType[ROW_COUNT * COL_COUNT];

		setPreferredSize(new Dimension(COL_COUNT * TILE_SIZE, ROW_COUNT * TILE_SIZE));
		setBackground(new Color (0,127,255));
	}


	public void clearBoard() {
		for(int i = 0; i < tiles.length; i++) {
			tiles[i] = null;
		}
	}


	 // point The coordinate of the tile.
	 // type The type to set the tile to.//

    public void setTile(Point point, TileType type) {
		setTile(point.x, point.y, type);
	}

	 // x The x coordinate of the tile.
	 //y The y coordinate of the tile.
	 // type The type to set the tile to.

	public void setTile(int x, int y, TileType type) {
		tiles[y * ROW_COUNT + x] = type;
	}

	public TileType getTile(int x, int y) {
		return tiles[y * ROW_COUNT + x];
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);

		for(int x = 0; x < COL_COUNT; x++) {
			for(int y = 0; y < ROW_COUNT; y++) {
				TileType type = getTile(x, y);
				if(type != null) {
					drawTile(x * TILE_SIZE, y * TILE_SIZE, type, g);
				}
			}
		}


		g.setColor(new Color (0,127,255));
		g.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
		for(int x = 0; x < COL_COUNT; x++) {
			for(int y = 0; y < ROW_COUNT; y++) {
				g.drawLine(x * TILE_SIZE, 0, x * TILE_SIZE, getHeight());
				g.drawLine(0, y * TILE_SIZE, getWidth(), y * TILE_SIZE);
			}
		}


		if(game.isGameOver() || game.isNewGame() || game.isPaused()) {
			g.setColor(Color.WHITE);

			int centerX = getWidth() / 2;
			int centerY = getHeight() / 2;


			String largeMessage = null;
			String smallMessage = null;
			if(game.isNewGame()) {
				largeMessage = "SNAKE GAME";
				smallMessage = "Press Enter to Start";
			} else if(game.isGameOver()) {
				largeMessage = "GAME OVER!";
				smallMessage = "Press Enter to Restart";
			} else if(game.isPaused()) {
				largeMessage = "BREAK";
				smallMessage = "Press B to pause";
			}


			g.setFont(FONT);
			g.drawString(largeMessage, centerX - g.getFontMetrics().stringWidth(largeMessage) / 2, centerY - 50);
			g.drawString(smallMessage, centerX - g.getFontMetrics().stringWidth(smallMessage) / 2, centerY + 50);
		}
	}

    //The x coordinate of the tile (in pixels).
	 // The y coordinate of the tile (in pixels).
	 //g type The type of tile to draw.
	 //g The graphics object to draw to.

	private void drawTile(int x, int y, TileType type, Graphics g) {

		switch(type) {

			case Fruit:
				g.setColor(new Color(175, 0,42));
				g.fillOval(x + 2, y + 2, TILE_SIZE - 4, TILE_SIZE - 4);
				break;

			case SnakeBody:
				g.setColor(new Color (0,106,78));
				g.fillRect(x, y, TILE_SIZE, TILE_SIZE);
				break;

			case SnakeHead:
				g.setColor(new Color (191,255,0));
				g.fillRect(x, y, TILE_SIZE, TILE_SIZE);

				g.setColor(new Color (0,106,78));

				break;
		}
	}

}


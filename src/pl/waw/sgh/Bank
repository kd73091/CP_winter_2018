package pl.waw.sgh.pl;


import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class Bank {

    private List<Customer> custList = new ArrayList<>();

    private List<pl.waw.sgh.pl.Account> accList = new ArrayList<>();

    private Integer lastCustID = 0;

    private Integer lastAccID = 100;

    // Public API
    public Customer newCustomer(String firstName,
                                String lastName,
                                String email) {
        Customer cust = new Customer(lastCustID++, firstName,
                lastName, email);
        custList.add(cust);
        return cust;
    }

    public pl.waw.sgh.pl.Account newAccount(Customer cust, String accType) {
        Account acc;
        switch (accType) {
            case "Savings":
                acc = new SavingsAccount(lastAccID++, 0.0, cust);
                break;
            case "Debit":
                acc = new DebitAccount(lastAccID++, 0.0, cust);
                break;
            default:
                acc = new CheckingAccount(lastAccID++, 0.0, cust);
        }
        accList.add(acc);
        return acc;
    }

    private pl.waw.sgh.pl.Account findAccountByID(Integer accID) {
        for (pl.waw.sgh.pl.Account acc : accList) {
            if (acc.getAccountID().equals(accID))
                return acc;
        }

        return null;
    }


    public void transfer(Integer fromAccID, Integer toAccID, Double amount) throws NotEnoughMoneyException {

        Account accountFrom = findAccountByID(fromAccID);
        Account accountTo = findAccountByID(toAccID);
        if (accountFrom == null | accountTo == null) {
            System.out.println("Transfer not possible- non existing account");
            return;

        }

        BigDecimal decimalAmount = BigDecimal.valueOf(amount);
        boolean canTransfer = accountFrom.getBalance().compareTo(decimalAmount) >= 0;   // enough money on the account

        if (!canTransfer) {
            System.out.println("You don't have enough money on the account " + accountFrom.getAccountID());
            System.out.println("Searching another account...");

            Customer customer1 = accountFrom.getCustomer();
            List<Account> accounts = this.findAccountsByCustomer(customer1.getCustomerID());
            for (Account customerAccount : accounts) {
                if (!customerAccount.getAccountID().equals(fromAccID) && customerAccount.getBalance().compareTo(decimalAmount) >= 0) {
                    accountFrom = customerAccount;
                    canTransfer = true;
                    System.out.println("Enough money on the account " + customerAccount.getAccountID() + " - transfer possible");
                }
            }
        }

        if (canTransfer) {
            accountFrom.charge(amount);
            accountTo.deposit(amount);
            System.out.println("Transfer successful");
        } else {
            System.out.println("Transfer not possible due not enough money on customer's account");
        }
    }

    private List<Account> findAccountsByCustomer(Integer customerId) {
        List<Account> customerAccounts = new ArrayList<>();
        for (Account account : accList) {
            if (account.getCustomerId() == customerId) {
                customerAccounts.add(account);
            }
        }
        return customerAccounts;
    }


    @Override
    public String toString () {
        return "Bank{" +
                "custs=\n" + custList +
                ",\naccs=\n" + accList +
                '}';
    }
}

